# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Only on pushes to master for now
trigger:
- master

# Use jobs so can split into directly hosted (on Azure) and in-Docker
# Not clear yet if/how can use a strategy matrix with VMs and Containers
jobs:
# Job(s) that can run directly in Azure VMs
- job: Azure
  strategy:
    matrix:
      ubuntu-18.04:
        imageName: 'ubuntu-18.04'
      macos-10.14:
        imageName: 'macos-10.14'
      windows-2019:
        imageName: 'windows-2019'
      windows-2017:
        imageName: 'vs2017-win2016'
  pool:
    vmImage: $(imageName)
  steps:
  - script: brew install boost
    condition: startsWith(variables.imageName,'macos')
  - template: .azure-templates/cmake-steps.yml

# Job that runs in a container on a VM
- job: Docker
  strategy:
    matrix:
      centos-7:
        containerName: 'benmorgan/centos-azure:7'
        env_file: '/opt/rh/devtoolset-8/enable'
      centos-8:
        containerName: 'benmorgan/centos-azure:8'
        env_file: ''
  pool:
    vmImage: 'ubuntu-16.04'
  container:
    image: $(containerName)
  # See https://github.com/SimpleITK/SimpleITK/blob/master/Testing/CI/Azure/azure-pipelines-batch.yml
  # for an example using containers and devtoolset
  # NB: The centos7 container is setup with cmake aliased to (yum installed) cmake3!
  # Environment setup by source env_file **NOT** persisted to subsequent steps!
  # Run in one step to test, to separate configure/make/test steps would need setup
  # script wrapping env setup and run in each step.
      # Essentially the CMake task
   #
  steps:
  - script: |
      [[ ! -z "$(env_file)" ]] && source $(env_file)
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=Debug ..
      cmake --build .
      CTEST_OUTPUT_ON_FAILURE=1 ctest 
